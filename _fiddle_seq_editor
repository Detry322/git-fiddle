#!/bin/bash
#
# Enhace the git-rebase(1) todo file with additional information about each
# commit, such as the author date, the author name and e-mail, as well as the
# commit message. The user then has the chance to edit any of this information
# when 'GIT_SEQUENCE_EDITOR' is invoked on the decorated git-rebase(1) todo
# file. Upon successful execution of 'GIT_SEQUENCE_EDITOR', parse the user's
# changes and prepare a 'git commit --amend' 'exec' step to be called after each
# 'pick'ed commit.

fiddle_todo="$1".fiddle

trap '{
	exit_code=$?
	rm -f "$fiddle_todo" || :
	exit $exit_code
}' EXIT

FIDDLE_MESSAGE="$(cat <<-'EOF'
	#
	# GIT-FIDDLE(1) HELP:
	# -------------------
	#
	# The format employed by git-fiddle is:
	#
	# <action> <sha> [<author>] [@ <timestamp>] [> <subject>]
	# [<body>]
	#
	# where '<action>' needs to be 'pick' for anything to happen.
EOF
)"

function trim {
	echo "$1" | sed -e '
		s/^[[:space:]]*//
		s/[[:space:]]*$//
	'
}

function create_git_pretty_format {
	local format=

	# --[no-]fiddle-author
	if ! [ "$GIT_FIDDLE_AUTHOR" = false ]; then
		format="$(trim "$format %an")"
		if ! [ "$GIT_FIDDLE_AUTHOR_EMAIL" = false ]; then
			format="$format <%ae>"
		fi
	fi

	# --[no-]fiddle-date
	if ! [ "$GIT_FIDDLE_AUTHOR_DATE" = false ]; then
		format="$(trim "$format @ %ad")"
	fi

	# --[no-]fiddle-subject
	if ! [ "$GIT_FIDDLE_SUBJECT" = false ]; then
		format="$(trim "$format> %s")"
	fi

	# --[no-]fiddle-body
	if ! [ "$GIT_FIDDLE_BODY" = false ]; then
		if [ "$GIT_FIDDLE_SUBJECT" = false ]; then
			format="$(trim "$format"$'%s\n%b')"
		else
			format="$(trim "$format"$'\n%b')"
		fi
	fi

	echo "$format"
}

function prepare {
	local -r git_pretty_format="--format=$(create_git_pretty_format)"
	while read -r line; do
		if [ -z "$line" ] || [[ $line =~ ^[[:space:]]?# ]]; then
			printf "%s\n" "$line"
		else
			read -r action sha rest <<< "$line"
			printf "%s %s %s\n" "$action" "$sha" \
				"$(git --no-pager show -s "$sha" "$git_pretty_format" | \
					git stripspace)"
		fi
	done < "$1" > "$2"
	echo "$FIDDLE_MESSAGE" >> "$2"
}

function fiddle_sequence_editor {
	if [ -z "$GIT_FIDDLE_SEQUENCE_EDITOR" ]; then
		GIT_FIDDLE_SEQUENCE_EDITOR="$(git config sequence.editor)"
		if [ -z "$GIT_FIDDLE_SEQUENCE_EDITOR" ]; then
			GIT_FIDDLE_SEQUENCE_EDITOR="$(git var GIT_EDITOR)" || return $?
		fi
	fi
	eval "$GIT_FIDDLE_SEQUENCE_EDITOR" '"$@"'
}

function esc { echo "$1" | sed -e "s/'/'\"'\"'/g"; }

function emit {
	local -r sha="$1"
	local -r author="$2"
	local -r date="$3"

	local subject="$4"
	local message="$5"

	if [ -z "$message" ]; then
		if [ -z "$subject" ]; then
			message="$(git --no-pager show -s "$sha" --format=$'%s\n%b')"
		else
			if [ "$GIT_FIDDLE_BODY" = false ]; then
				message="$subject\n$(git --no-pager show -s "$sha" --format=$'%b')"
			else
				message="$subject"
			fi
		fi
	else
		if [ ! -z "$subject" ]; then
			message="$subject\n$message"
		fi
	fi

	local c=
	[ ! -z "$date" ] && c="GIT_AUTHOR_DATE='$date'"
	c="$c git commit --amend --no-edit"
	[ ! -z "$date" ] && c="$c --date='$(esc "$date")'"
	[ ! -z "$author" ] && c="$c --author='$(esc "$author")'"
	c="$c --message=$'$(esc "$message")'"

	echo "exec bash -c \"$(echo "$c" | sed \
		-e 's/\\/\\\\/g' \
		-e 's/"/\\"/g' \
		-e 's/`/\\`/g' \
		-e ':a;N;$!ba;s/\n/\\n/g'
	)\""
}

function apply {
	set -eo pipefail

	local m=1
	local cur_sha=
	local scanning_body=false
	local _author _date _subject _message

	while read -r line; do
		read -r action sha rest <<< "$line"
		if echo "$action" \
			| grep -E -q '^(pick|p|drop|d|reword|r|edit|e|squash|s|fixup|f)$'
		then
			if [[ "$sha" =~ ^[0-9a-z]{6,}$ ]]; then

				# flush the current scan
				if $scanning_body; then
					emit "$cur_sha" "$_author" "$_date" "$_subject" "$_message"
				fi

				# retain the action
				echo "$action $sha"

				# reset state
				scanning_body=false
				_author=
				_date=
				_subject=
				_message=
				declare -a output

				# begin a fresh scan for 'pick' actions
				if [[ "$action" == pick ]]; then
					cur_sha="$sha"
					OLD_IFS="$IFS"
					IFS=$'\n' output=($(awk -v FS='' '{
						# constants
						FALSE = 0
						TRUE  = 1
						STATE_AUTHOR  = 1
						STATE_DATE    = 2
						STATE_SUBJECT = 3

						# intermediate/output state
						author = ""
						date = ""
						subject = ""
						in_parens = FALSE
						in_email_angles = FALSE
						state = STATE_AUTHOR

						# [author [<email>]] [@ <author_date>    ] [><subject>]
						# |  STATE_AUTHOR  | | STATE_DATE | STATE_SUBJECT

						for (i = 1; i <= NF; i++) {
							# process state transitions
							if ($i == "@" && in_email_angles == FALSE && state < STATE_DATE) {
								state = STATE_DATE
							} else if ($i == ">" && in_email_angles == FALSE && state < STATE_SUBJECT) {
								state = STATE_SUBJECT
							} else if (state == STATE_AUTHOR) {
								if ($i == "<") {
									in_email_angles = TRUE
								} else if ($i == ">") {
									in_email_angles = FALSE
								}
								author = author $i
							} else if (state == STATE_DATE) {
								date = date $i
							} else if (state == STATE_SUBJECT) {
								subject = subject $i
							}
						}

						# avoid field collapsing in bash, by printing a blank
						# which is not present in $IFS
						if (length(author) == 0)  { author  = " "; }
						if (length(date) == 0)    { date    = " "; }
						if (length(subject) == 0) { subject = " "; }

						print author
						print date
						print subject
					}' <<< "$(trim "$rest")"))
					IFS="$OLD_IFS"

					_author="$(trim "${output[0]}")"
					_date="$(trim "${output[1]}")"
					_subject="$(trim "${output[2]}")"

					scanning_body=$GIT_FIDDLE_BODY
					continue
				fi
			fi
		fi

		if $scanning_body; then
			_message="$_message\n$line"
		else
			echo "$line" # not our issue! let git-rebase fail
		fi
	done <<< "$(git stripspace --strip-comments < "$1")"

	# flush the current scan
	if $scanning_body; then
		emit "$cur_sha" "$_author" "$_date" "$_subject" "$_message"
	fi
}

# kick off
prepare "$1" "$fiddle_todo" && \
	fiddle_sequence_editor "$fiddle_todo" && \
		apply "$fiddle_todo" > "$1" || exit $?;
