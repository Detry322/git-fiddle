#!/bin/bash
#
# Enhace the git-rebase(1) todo file with additional information about each
# commit, such as the author date, the author name and e-mail, as well as the
# commit message. The user then has the chance to edit any of this information
# when 'GIT_SEQUENCE_EDITOR' is invoked on the decorated git-rebase(1) todo
# file. Upon successful execution of 'GIT_SEQUENCE_EDITOR', parse the user's
# changes and prepare a 'git commit --amend' 'exec' step to be called after each
# 'pick'ed commit.

fiddle_todo="$1".fiddle

trap '{
	exit_code=$?
	rm -f "$fiddle_todo" || :
	exit $exit_code
}' EXIT

FIDDLE_MESSAGE="$(cat <<-'EOF'
	#
	# WARNING: any changes to the author, date and message are only retained
	#          for 'picked' commits.
EOF
)"

# process the '--no-fiddle-messages' option
GIT_PRETTY_FORMAT=$'--format=%ad by: %an <%ae>\n%s\n\n%b'
if [ "${GIT_FIDDLE_MSG-true}" = false ]; then
	GIT_PRETTY_FORMAT=$'--format=%ad by: %an <%ae>'
fi

function prepare () {
	while read -r line; do
		if [ -z "$line" ] || [[ $line =~ ^[[:space:]]?# ]]; then
			printf "%s\n" "$line"
		else
			read -r action sha rest < <(echo "$line")
			printf "%s %s %s\n\n" "$action" "$sha" \
				"$(git --no-pager show -s "$sha" "$GIT_PRETTY_FORMAT")"
		fi
	done < "$1" > "$2"
	echo "$FIDDLE_MESSAGE" >> "$2"
}

function fiddle_sequence_editor () {
	if [ -z "$GIT_FIDDLE_SEQUENCE_EDITOR" ]; then
		GIT_FIDDLE_SEQUENCE_EDITOR="$(git config sequence.editor)"
		if [ -z "$GIT_FIDDLE_SEQUENCE_EDITOR" ]; then
			GIT_FIDDLE_SEQUENCE_EDITOR="$(git var GIT_EDITOR)" || return $?
		fi
	fi
	eval "$GIT_FIDDLE_SEQUENCE_EDITOR" '"$@"'
}

function emit () {
	local -r author="$1"
	local -r date="$2"
	local -r message="$3"

	local c='exec'
	[ ! -z "$date" ] && c="$c GIT_AUTHOR_DATE='$date'"
	c="$c git commit --amend --no-edit"
	[ ! -z "$date" ] && c="$c --date='$date'"
	[ ! -z "$author" ] && c="$c --author='$author'"
	[ ! -z "$message" ] && c="$c --message=\$'$message'"
	echo "$c"
}

function apply () {
	set -eo pipefail

	local scanning=false
	mod_message=
	declare -a mod_date mod_author

	while read -r line; do
		read -r action sha rest < <(echo "$line")
		if [[ "$action" =~ ^pick|p|drop|d|reword|r|edit|e|squash|s|fixup|f$ ]]; then
			if [[ "$sha" =~ ^[0-9a-z]{6,}$ ]]; then

				# flush the current scan
				if $scanning; then
					emit "${mod_author[*]}" "${mod_date[*]}" "$mod_message"
				fi

				# retain the action
				echo "$action $sha"

				# reset state
				scanning=false
				mod_message=
				unset mod_date mod_author
				declare -a mod_date mod_author

				# begin a fresh scan for 'pick' actions
				if [[ "$action" == pick ]]; then
					m=0
					scanning=true
					for col in $rest; do
						if [[ "$col" == by: ]]; then m=1; else
							case $m in
								0) mod_date+=("$col"); ;;
								1) mod_author+=("$col"); ;;
							esac
						fi
					done
					continue
				fi
			fi
		fi

		if $scanning; then
			mod_message="$mod_message\n$line"
		fi
	done < <(git stripspace --strip-comments < "$1")

	# flush the current scan
	if $scanning; then
		emit "${mod_author[*]}" "${mod_date[*]}" "$mod_message"
	fi
}

# kick off
prepare "$1" "$fiddle_todo" && \
	fiddle_sequence_editor "$fiddle_todo" && \
		apply "$fiddle_todo" > "$1" || exit $?;
