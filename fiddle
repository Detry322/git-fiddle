#!/bin/bash
#
# git-fiddle
#
# Edit commit meta information during an *interactive* rebase.
#
# `git-fiddle(1)' is a lightweight wrapper around `git-rebase(1)' that
# annotates each commit with it's *author* date, the author name, as well
# as the commit message. Changes to any of these will then be applied
# using an 'exec' script during the git-rebase sequence.
#
# Usage:
#   $SCRIPT [--[no-]fiddle-messages] [args...]
#
# Options:
#   --[no-]fiddle-messages Do not edit commit messages. Useful for quick edits
#                          to author or date. This value can also be set using
#                          `git config fiddle.messages`.
#   [args...]              These arguments are passed verbatim to git-rebase.

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ORIGINAL_GIT_SEQUENCE_EDITOR="$GIT_SEQUENCE_EDITOR"

# print the help text
# note: the help text is derived from this file
function help () {
	awk '
	f && !NF { exit }
	/^#/ && NR>2 { f=1; sub("^# ", "", $0); print $0 }
	' < "${BASH_SOURCE[0]}"
}

# only capture '-h|--help' if it's first arg. let git-rebase handle it
# otherwise.
case "${1---help}" in
	-h|--help) help; exit 0;;
esac

# strip args to `git-fiddle' from argv, so git-rebase won't reject them.
git_fiddle_msg=
declare -a git_rebase_args
while [ $# -gt 0 ]; do
	case "$1" in
		--no-fiddle-messages) git_fiddle_msg=false; ;;
		--fiddle-messages) git_fiddle_msg=true; ;;
		*) git_rebase_args+=("$1"); ;;
	esac
	shift
done

# load config where needed
if [ -z "$git_fiddle_msg" ]; then
	git_fiddle_msg="$(git config fiddle.messages)"
	if [ -z "$git_fiddle_msg" ]; then
		git_fiddle_msg=true
	fi
fi

# invoke `git-rebase' using a custom editor, effectively wrapping the user's
# actual editor choice, which will be invoked from the `git-fiddle` editor
# itself.
GIT_SEQUENCE_EDITOR="${SCRIPT_DIR}/editor" \
	GIT_FIDDLE_MSG="$git_fiddle_msg" \
	GIT_FIDDLE_SEQUENCE_EDITOR="$ORIGINAL_GIT_SEQUENCE_EDITOR" \
	git rebase -i "${git_rebase_args[@]}"
